AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: aws-cdk-java-sns
Resources:
  GatewayFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: GatewayFunction
      Handler: com.rob.gatewayfunction.App::handleRequest
      Runtime: java11
      Architectures:
        - x86_64
      MemorySize: 512
      Timeout: 20
      Environment:
        Variables:
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
          TOPIC_ARN: !Ref MySNSTopic
      Policies:
        - SNSPublishMessagePolicy:
            TopicName:
              !GetAtt MySNSTopic.TopicName
      Events:
        HelloWorld:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /hello
            Method: get

  DynamodbFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: DynamodbFunction
      Handler: com.rob.dynamodbfunction.App::handleRequest
      Runtime: java11
      Architectures:
        - x86_64
      MemorySize: 512
      Timeout: 20
      Environment:
        Variables:
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
          DYNO_TABLE: !Ref DynamoDBTable
      Events:
        MySQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt MySqsQueue.Arn
            BatchSize: 1
      Policies:
        - SQSPollerPolicy:
            QueueName:
              !GetAtt MySqsQueue.QueueName
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBTable

  RestWeatherApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: RestWeatherFunction
      Handler: com.rob.restweatherapifunction.App::handleRequest
      Runtime: java11
      Architectures:
        - x86_64
      MemorySize: 512
      Timeout: 20
      Environment:
        Variables:
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
      Events:
        SNS1:
          Type: SNS
          Properties:
            Topic:
              Ref: MySNSTopic

  MySNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: "Test"

  MySqsQueue:
    Type: AWS::SQS::Queue

  QueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: allow-service-to-read-and-write-messages
            Effect: Allow
            Principal: "*"
            Resource: !GetAtt MySqsQueue.Arn
            Action: "sqs:*"
      Queues:
        - !Ref MySqsQueue

  SnsSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: sqs
      Endpoint: !GetAtt MySqsQueue.Arn
      TopicArn: !Ref MySNSTopic


  LambdaFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt DynamodbFunction.Arn
      Principal: sns.amazonaws.com

  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5